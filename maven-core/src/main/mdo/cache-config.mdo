<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<model xmlns="http://codehaus-plexus.github.io/MODELLO/1.4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://codehaus-plexus.github.io/MODELLO/1.4.0 http://codehaus-plexus.github.io/modello/xsd/modello-1.4.0.xsd"
       xsd.namespace="org:apache:maven:cache:config">
    <id>cache-config</id>
    <name>CacheConfig</name>
    <description><![CDATA[
  ]]></description>

    <defaults>
        <default>
            <key>package</key>
            <value>org.apache.maven.caching.domain</value>
        </default>
    </defaults>

    <classes>

        <!--
        <xs:element name="cache" type="c:CacheType">
            <xs:annotation>
                <xs:documentation>
                    Cached build metadata
                </xs:documentation>
            </xs:annotation>
        </xs:element>

        <xs:complexType name="CacheType">
            <xs:sequence>
                <xs:element name="configuration" type="c:ConfigurationType">
                    <xs:annotation>
                        <xs:documentation>
                            Configuration of major cache properties
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="input" type="c:InputType">
                    <xs:annotation>
                        <xs:documentation>
                            Configuration for source code input files participating in checksum calculation
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="output" type="c:OutputType" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>
                            Configuration for output artifacts, it's needed if you want to explicitly include/exclude something from caching
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="executionControl" type="c:ExecutionControlType" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>
                            Execution rules for plugins in cached mode. Defines which plugins should run always
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
        -->
        <class rootElement="true" xml.tagName="cache">
            <name>CacheType</name>
            <fields>
                <field>
                    <name>configuration</name>
                    <association>
                        <type>ConfigurationType</type>
                    </association>
                </field>
                <field>
                    <name>input</name>
                    <association>
                        <type>InputType</type>
                    </association>
                </field>
                <field>
                    <name>output</name>
                    <association>
                        <type>OutputType</type>
                    </association>
                </field>
                <field>
                    <name>executionControl</name>
                    <association>
                        <type>ExecutionControlType</type>
                    </association>
                </field>
            </fields>
        </class>

        <!--
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="url" type="xs:string" minOccurs="0">
                                <xs:annotation>
                                    <xs:documentation>
                                        address of remote cache
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="enabled" type="xs:boolean" default="true"/>
                        <xs:attribute name="saveToRemote" type="xs:boolean" default="false">
                            <xs:annotation>
                                <xs:documentation>
                                    Save output to remote cache. Recommended to enable on CI agents only.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
          -->
        <class>
            <name>Remote</name>
            <fields>
                <field>
                    <name>url</name>
                    <type>String</type>
                    <description>address of remote cache</description>
                </field>
                <field xml.attribute="true">
                    <name>enabled</name>
                    <type>boolean</type>
                    <defaultValue>true</defaultValue>
                </field>
                <field xml.attribute="true">
                    <name>saveToRemote</name>
                    <type>boolean</type>
                    <defaultValue>false</defaultValue>
                    <description>Save output to remote cache. Recommended to enable on CI agents only.</description>
                </field>
            </fields>
        </class>

        <!--

    <xs:complexType name="ConfigurationType">
        <xs:sequence>
            <xs:element name="enabled" type="xs:boolean"/>
            <xs:element name="hashAlgorithm">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="XX">
                            <xs:annotation>
                                <xs:documentation>
                                    64 bit XX family hashing. Fast, but higher probability of collisions
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="XXMM">
                            <xs:annotation>
                                <xs:documentation>
                                    64 bit XX family hashing, with usage of Memory Mapped Buffer
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="SHA-1"/>
                        <xs:enumeration value="SHA-256"/>
                        <xs:enumeration value="SHA-384"/>
                        <xs:enumeration value="SHA-512"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="validateXml" type="xs:boolean" default="true">
                <xs:annotation>
                    <xs:documentation>
                        Validate cache config and builds metadata against xsd.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="projectDiscoveryStrategy" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        Specifies how to identify belonging to a cached project then submodule is being build.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:choice>
                        <xs:element name="specificVersion" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>
                                    Any project dependency this this version will be considered cache eligible and will
                                    be processed cache aware
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:choice>
                </xs:complexType>
            </xs:element>
            <xs:element name="remote">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="url" type="xs:string" minOccurs="0">
                            <xs:annotation>
                                <xs:documentation>
                                    address of remote cache
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                    <xs:attribute name="enabled" type="xs:boolean" default="true"/>
                    <xs:attribute name="saveToRemote" type="xs:boolean" default="false">
                        <xs:annotation>
                            <xs:documentation>
                                Save output to remote cache. Recommended to enable on CI agents only.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
            <xs:element name="attachedOutputs" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="dirName" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>
                                    Directory name in build output directory to attach to cached artifacts
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="local">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="maxBuildsCached" type="xs:positiveInteger" default="3">
                            <xs:annotation>
                                <xs:documentation>
                                    Maximum number of cached build per artifact in local cache. First created cache (the
                                    oldest) is
                                    evicted if breached.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="debug" minOccurs="0" maxOccurs="unbounded">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="FileHash">
                            <xs:annotation>
                                <xs:documentation>
                                    Causes file hash is saved in build metadata
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="EffectivePom">
                            <xs:annotation>
                                <xs:documentation>
                                    Causes effective pom info is saved in build metadata
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
          -->
        <class>
            <name>ConfigurationType</name>
            <fields>
                <field>
                    <name>enabled</name>
                    <type>boolean</type>
                </field>
                <field>
                    <name>hashAlgorithm</name>
                    <type>String</type>
                    <description>One of XX, XXMM, SHA-1, SHA-256, SHA-384, SHA-512</description>
                </field>
                <field>
                    <name>validateXml</name>
                    <type>boolean</type>
                    <defaultValue>true</defaultValue>
                    <description>Validate cache config and builds metadata against xsd.</description>
                </field>
                <field>
                    <name>projectDiscoveryStrategy</name>
                    <association>
                        <type>ProjectDiscoveryStrategy</type>
                    </association>
                    <description>Specifies how to identify belonging to a cached project then submodule is being build.</description>
                </field>
                <field>
                    <name>remote</name>
                    <association>
                        <type>Remote</type>
                    </association>
                </field>
                <field>
                    <name>attachedOutputs</name>
                    <association>
                        <type>AttachedOutputs</type>
                    </association>
                </field>
                <field>
                    <name>local</name>
                    <association>
                        <type>Local</type>
                    </association>
                </field>
                <field>
                    <name>debugs</name>
                    <association>
                        <type>String</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>FileHash (causes file hash is saved in build metadata) or
                        EffectivePom (causes effective pom info is saved in build metadata)</description>
                </field>
            </fields>
        </class>

        <!--
        <xs:complexType>
            <xs:choice>
                <xs:element name="specificVersion" type="xs:string">
                    <xs:annotation>
                        <xs:documentation>
                            Any project dependency this this version will be considered cache eligible and will
                            be processed cache aware
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:choice>
        </xs:complexType>
        -->
        <class>
            <name>ProjectDiscoveryStrategy</name>
            <fields>
                <field>
                    <name>specificVersion</name>
                    <type>String</type>
                    <description>
                        Any project dependency this this version will be considered cache eligible and will
                        be processed cache aware
                    </description>
                </field>
            </fields>
        </class>

        <!--
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="dirName" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>
                                        Directory name in build output directory to attach to cached artifacts
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
          -->
        <class>
            <name>AttachedOutputs</name>
            <fields>
                <field>
                    <name>dirNames</name>
                    <association>
                        <type>String</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Directory name in build output directory to attach to cached artifacts</description>
                </field>
            </fields>
        </class>

        <!--
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="maxBuildsCached" type="xs:positiveInteger" default="3">
                                <xs:annotation>
                                    <xs:documentation>
                                        Maximum number of cached build per artifact in local cache. First created cache (the
                                        oldest) is
                                        evicted if breached.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
          -->
        <class>
            <name>Local</name>
            <fields>
                <field>
                    <name>maxBuildsCached</name>
                    <type>int</type>
                    <defaultValue>3</defaultValue>
                    <description>Maximum number of cached build per artifact in local cache. First created cache (the
                        oldest) is evicted if breached.</description>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="InputType">
        <xs:sequence>
            <xs:element name="global" type="c:PathSetType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        Global input calculation rules applicable to all projects and plugins in the build
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="plugin" type="c:PluginConfigurationScanType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        Plugin specific input calculation rules
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
          -->
        <class>
            <name>InputType</name>
            <fields>
                <field>
                    <name>global</name>
                    <association>
                        <type>PathSetType</type>
                    </association>
                    <description>Global input calculation rules applicable to all projects and plugins in the build</description>
                </field>
                <field>
                    <name>plugins</name>
                    <association>
                        <type>PluginConfigurationScanType</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Plugin specific input calculation rules</description>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="PluginConfigurationScanType">
        <xs:complexContent>
            <xs:extension base="c:CoordinatesBaseType">
                <xs:sequence>
                    <xs:element name="effectivePom" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                Effective pom calculation rules
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="excludeProperty" type="xs:string" maxOccurs="unbounded">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Plugin configuration property should be excluded from effective pom
                                            calculation
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="dirScan" type="c:DirScanConfigType" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                Specifies plugin level rules of configuration processing in search of referenced source
                                files
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="execution" type="c:ExecutionConfigurationScanType" minOccurs="0"
                                maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>
                                Specifies execution specific configuration processing in search of referenced source
                                files
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
          -->
        <class>
            <name>PluginConfigurationScanType</name>
            <superClass>CoordinatesBaseType</superClass>
            <fields>
                <field>
                    <name>effectivePom</name>
                    <association>
                        <type>EffectivePom</type>
                    </association>
                    <description>Effective pom calculation rules</description>
                </field>
                <field>
                    <name>dirScan</name>
                    <association>
                        <type>DirScanConfigType</type>
                    </association>
                    <description>Specifies plugin level rules of configuration processing in search of referenced source files</description>
                </field>
                <field>
                    <name>executions</name>
                    <association>
                        <type>ExecutionConfigurationScanType</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Specifies execution specific configuration processing in search of referenced source files</description>
                </field>
            </fields>
        </class>

        <!--
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="excludeProperty" type="xs:string" maxOccurs="unbounded">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Plugin configuration property should be excluded from effective pom
                                            calculation
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
          -->
        <class>
            <name>EffectivePom</name>
            <fields>
                <field>
                    <name>excludeProperties</name>
                    <association>
                        <type>String</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Plugin configuration property should be excluded from effective pom calculation</description>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="ExecutionConfigurationScanType">
        <xs:sequence>
            <xs:element name="execId" maxOccurs="unbounded"/>
            <xs:element name="dirScan" type="c:DirScanConfigType">
                <xs:annotation>
                    <xs:documentation>
                        Specifies rules of configuration processing in search of referenced source files
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="ignoreParentConfig" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>
                    ignore parent config or inherit/merge
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
          -->
        <class>
            <name>ExecutionConfigurationScanType</name>
            <fields>
                <field>
                    <name>execIds</name>
                    <association>
                        <type>String</type>
                        <multiplicity>*</multiplicity>
                    </association>
                </field>
                <field>
                    <name>dirScan</name>
                    <association>
                        <type>DirScanConfigType</type>
                    </association>
                    <description>Specifies rules of configuration processing in search of referenced source files</description>
                </field>
                <field xml.attribute="true">
                    <name>ignoreParentConfig</name>
                    <type>boolean</type>
                    <description>ignore parent config or inherit/merge</description>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="TagScanConfigType">
        <xs:simpleContent>
            <xs:extension base="c:TagNameType">
                <xs:attributeGroup ref="c:pathScanAttrGroup"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
          -->
        <class>
            <name>TagScanConfigType</name>
            <superClass>TagNameType</superClass>
            <fields>
                <field xml.attribute="true">
                    <name>recursive</name>
                    <type>boolean</type>
                    <defaultValue>true</defaultValue>
                </field>
                <field xml.attribute="true">
                    <name>glob</name>
                    <type>String</type>
                    <defaultValue>*</defaultValue>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="DirScanConfigType">
        <xs:choice>
            <xs:element name="include" maxOccurs="unbounded" type="c:TagScanConfigType">
                <xs:annotation>
                    <xs:documentation>
                        Forces cache to treat property value as input and include in calculation. If set, only included
                        properties will be takein in calculation (whitelist)
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:sequence>
                <xs:element name="exclude" type="c:TagNameType" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
                            Tag to exclude when scanning plugin configuration for input files (blacklist)
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="tagScanConfig" type="c:TagScanConfigType" minOccurs="0"
                            maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
                            Additional processing rules for non-blacklisted tags
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:choice>

        <xs:attribute name="ignoreParent" type="xs:boolean" default="false">
            <xs:annotation>
                <xs:documentation>
                    Ignore parent settings or inherit and merge
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="mode">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="auto">
                        <xs:annotation>
                            <xs:documentation>
                                Scan directory accordingly to cache implementation
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="skip">
                        <xs:annotation>
                            <xs:documentation>
                                Skip directory
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
          -->
        <class>
            <name>DirScanConfigType</name>
            <fields>
                <field>
                    <name>includes</name>
                    <association>
                        <type>TagScanConfigType</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Forces cache to treat property value as input and include in calculation. If set, only included
                        properties will be takein in calculation (whitelist)</description>
                </field>
                <field>
                    <name>excludes</name>
                    <association>
                        <type>TagNameType</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Tag to exclude when scanning plugin configuration for input files (blacklist)</description>
                </field>
                <field>
                    <name>tagScanConfigs</name>
                    <association>
                        <type>TagScanConfigType</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Additional processing rules for non-blacklisted tags</description>
                </field>
                <field xml.attribute="true">
                    <name>ignoreParent</name>
                    <type>boolean</type>
                    <defaultValue>false</defaultValue>
                    <description>Ignore parent settings or inherit and merge</description>
                </field>
                <field xml.attribute="true">
                    <name>mode</name>
                    <type>String</type>
                    <description>
                        Either 'auto' (scan directory accordingly to cache implementation) or 'skip' (skip directory).
                    </description>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="OutputType">
        <xs:sequence>
            <xs:element name="exclude" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        Patterns to exclude output artifacts applicable to all projects in the build
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="pattern" type="xs:string" minOccurs="1" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
          -->
        <class>
            <name>OutputType</name>
            <fields>
                <field>
                    <name>exclude</name>
                    <association>
                        <type>OutputTypeExclude</type>
                    </association>
                    <description>Patterns to exclude output artifacts applicable to all projects in the build</description>
                </field>
            </fields>
        </class>

        <class>
            <name>OutputTypeExclude</name>
            <fields>
                <field>
                    <name>patterns</name>
                    <association>
                        <type>String</type>
                        <multiplicity>*</multiplicity>
                    </association>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="PathSetType">
        <xs:sequence>
            <xs:element name="glob" type="xs:string" minOccurs="0" default="*"/>
            <xs:element name="include" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:simpleContent>
                        <xs:extension base="xs:string">
                            <xs:attributeGroup ref="c:pathScanAttrGroup"/>
                        </xs:extension>
                    </xs:simpleContent>
                </xs:complexType>
            </xs:element>
            <xs:element name="exclude" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
          -->
        <class>
            <name>PathSetType</name>
            <fields>
                <field>
                    <name>glob</name>
                    <type>String</type>
                    <defaultValue>*</defaultValue>
                </field>
                <field>
                    <name>includes</name>
                    <association>
                        <type>Include</type>
                        <multiplicity>*</multiplicity>
                    </association>
                </field>
                <field>
                    <name>excludes</name>
                    <association>
                        <type>Exclude</type>
                        <multiplicity>*</multiplicity>
                    </association>
                </field>
            </fields>
        </class>
        <class>
            <name>Exclude</name>
            <fields>
                <field xml.content="true">
                    <name>value</name>
                    <type>String</type>
                </field>
            </fields>
        </class>
        <class>
            <name>Include</name>
            <fields>
                <field xml.content="true">
                    <name>value</name>
                    <type>String</type>
                </field>
                <field xml.attribute="true">
                    <name>recursive</name>
                    <type>boolean</type>
                    <defaultValue>true</defaultValue>
                </field>
                <field xml.attribute="true">
                    <name>glob</name>
                    <type>String</type>
                    <defaultValue>*</defaultValue>
                </field>
            </fields>
        </class>

        <!--
        <xx xs:complexType name="ReconciliationType">
            <xs:sequence>
                <xs:element name="plugin" type="c:GoalsReconciliationType" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
                            Plugin specific reconciliation rules between cached build and running one
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType xx>
        -->

        <!--
    <xs:complexType name="GoalReconciliationType">
        <xs:complexContent>
            <xs:extension base="c:GoalIdType">
                <xs:sequence>
                    <xs:element name="reconcile" type="c:TrackedPropertyType" minOccurs="0" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>
                                Specify property which should be reconciled against running build
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="log" type="c:PropertyNameType" minOccurs="0" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>
                                Specify property which should be logged to build metadata for exploration
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="nolog" type="c:PropertyNameType" minOccurs="0" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>
                                Specify property which should not be logged
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
                <xs:attribute name="logAll" type="xs:boolean" default="true">
                    <xs:annotation>
                        <xs:documentation>
                            Controls if all plugin properties to be logged (true is default). All the properties logged
                            with respect to log/nolog children:
                            * true: logged all if no blacklists (<nolog/>) and whitelists (<log/>) specified on plugin
                            level
                            * false: logged only tracked and included by whitelists (<log/>) on plugin level
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    -->

        <class>
            <name>GoalReconciliationType</name>
            <superClass>GoalIdType</superClass>
            <fields>
                <field>
                    <name>reconciles</name>
                    <association>
                        <type>TrackedPropertyType</type>
                        <multiplicity>*</multiplicity>
                    </association>
                </field>
                <field>
                    <name>logs</name>
                    <association>
                        <type>PropertyNameType</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Specify property which should be logged to build metadata for exploration</description>
                </field>
                <field>
                    <name>nologs</name>
                    <association>
                        <type>PropertyNameType</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Specify property which should not be logged</description>
                </field>
                <field>
                    <name>logAll</name>
                    <type>boolean</type>
                    <defaultValue>true</defaultValue>
                    <description>Controls if all plugin properties to be logged (true is default). All the properties logged
                        with respect to log/nolog children:
                        * true: logged all if no blacklists (&lt;nolog/&gt;) and whitelists (&lt;log/&gt;) specified on plugin
                        level
                        * false: logged only tracked and included by whitelists (&lt;log/&gt;) on plugin level
                    </description>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="ExecutionControlType">
        <xs:all>
            <xs:element name="runAlways" type="c:ExecutablesType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        Specify which plugin should run always if present in build regardless of cached status
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="ignoreMissing" type="c:ExecutablesType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        Specify which executions/plugins/goals do not affect generated artifacts and do not affect build correctness.
                        If cached build lacks of ignorable executions only, it still could be reused.
                        Typically case is then cached build is produced with 'verify' and you locally you run 'install'.
                        Strictly speaking these are different builds but in most of cases you want this difference to be ignored
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="reconcile" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        Specify which plugin should run always if present in build regardless of cached status
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="plugin" type="c:GoalReconciliationType" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>
                                    Reconciliation rules for plugin properties which might be affected by command line
                                    flags, etc
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                    <xs:attribute name="logAllProperties" type="xs:boolean" default="true">
                        <xs:annotation>
                            <xs:documentation>
                                Controls if all plugin properties to be logged (true is default). All the properties
                                logged with respect to children:
                                * logAll on plugin level overrides global value
                                * true: logged all if no blacklists (<nolog/>) and whitelists (<log/>) specified on
                                plugin level
                                * false: logged only tracked and included by whitelists (<log/>) on plugin level
                                <log/>
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:all>
    </xs:complexType>
    -->

        <class>
            <name>ExecutionControlType</name>
            <fields>
                <field>
                    <name>runAlways</name>
                    <association>
                        <type>ExecutablesType</type>
                    </association>
                    <description>Specify which plugin should run always if present in build regardless of cached status</description>
                </field>
                <field>
                    <name>ignoreMissing</name>
                    <association>
                        <type>ExecutablesType</type>
                    </association>
                    <description>
                        Specify which executions/plugins/goals do not affect generated artifacts and do not affect build correctness.
                        If cached build lacks of ignorable executions only, it still could be reused.
                        Typically case is then cached build is produced with 'verify' and you locally you run 'install'.
                        Strictly speaking these are different builds but in most of cases you want this difference to be ignored
                    </description>
                </field>
                <field>
                    <name>reconcile</name>
                    <association>
                        <type>Reconcile</type>
                    </association>
                    <description>Specify which plugin should run always if present in build regardless of cached status</description>

                </field>
            </fields>
        </class>

        <!--
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="plugin" type="c:GoalReconciliationType" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>
                                        Reconciliation rules for plugin properties which might be affected by command line
                                        flags, etc
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="logAllProperties" type="xs:boolean" default="true">
                            <xs:annotation>
                                <xs:documentation>
                                    Controls if all plugin properties to be logged (true is default). All the properties
                                    logged with respect to children:
                                    * logAll on plugin level overrides global value
                                    * true: logged all if no blacklists (<nolog/>) and whitelists (<log/>) specified on
                                    plugin level
                                    * false: logged only tracked and included by whitelists (<log/>) on plugin level
                                    <log/>
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
          -->
        <class>
            <name>Reconcile</name>
            <fields>
                <field>
                    <name>plugins</name>
                    <association>
                        <type>GoalReconciliationType</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Reconciliation rules for plugin properties which might be affected by command line flags, etc</description>
                </field>
                <field xml.attribute="true">
                    <name>logAllProperties</name>
                    <type>boolean</type>
                    <defaultValue>true</defaultValue>
                    <description>
                        Controls if all plugin properties to be logged (true is default). All the properties
                        logged with respect to children:
                        * logAll on plugin level overrides global value
                        * true: logged all if no blacklists (&lt;nolog/&gt;) and whitelists (&lt;log/&gt;) specified on
                        plugin level
                        * false: logged only tracked and included by whitelists (&lt;log/&gt;) on plugin level
                        &lt;log/&gt;
                    </description>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="ExecutablesType">
        <xs:sequence>
            <xs:element name="plugin" type="c:PluginSetType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        Specify which plugin should run always if present in build regardless of cached status
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="execution" type="c:ExecutionIdsListType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        Specify which executions should run always if present in build regardless of cached status
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="goals" type="c:GoalsListType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        Specify which goals should run always if present in build regardless of cached status
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    -->

        <class>
            <name>ExecutablesType</name>
            <fields>
                <field>
                    <name>plugins</name>
                    <association>
                        <type>PluginSetType</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Specify which executions should run always if present in build regardless of cached status</description>
                </field>
                <field>
                    <name>executions</name>
                    <association>
                        <type>ExecutionIdsListType</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Specify which executions should run always if present in build regardless of cached status</description>
                </field>
                <field>
                    <name>goalsLists</name>
                    <association>
                        <type>GoalsListType</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Specify which goals should run always if present in build regardless of cached status</description>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="GoalsListType">
        <xs:complexContent>
            <xs:extension base="c:CoordinatesBaseType">
                <xs:sequence>
                    <xs:element name="goal" type="xs:string" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>
                                Goals identification
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    -->

        <class>
            <name>GoalsListType</name>
            <superClass>CoordinatesBaseType</superClass>
            <fields>
                <field>
                    <name>goals</name>
                    <association>
                        <type>String</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Goals identification</description>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="GoalIdType">
        <xs:complexContent>
            <xs:extension base="c:CoordinatesBaseType">
                <xs:attribute name="goal" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    -->

        <class>
            <name>GoalIdType</name>
            <superClass>CoordinatesBaseType</superClass>
            <fields>
                <field xml.attribute="true">
                    <name>goal</name>
                    <type>String</type>
                    <required>true</required>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="ExecutionIdsListType">
        <xs:complexContent>
            <xs:extension base="c:CoordinatesBaseType">
                <xs:sequence>
                    <xs:element name="execId" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>
                                Executions ids list with plugin identifier
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    -->

        <class>
            <name>ExecutionIdsListType</name>
            <superClass>CoordinatesBaseType</superClass>
            <fields>
                <field>
                    <name>execIds</name>
                    <association>
                        <type>String</type>
                        <multiplicity>*</multiplicity>
                    </association>
                    <description>Executions ids list with plugin identifier</description>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="PluginSetType">
        <xs:complexContent>
            <xs:extension base="c:CoordinatesBaseType"/>
        </xs:complexContent>
    </xs:complexType>
    -->

        <class>
            <name>PluginSetType</name>
            <superClass>CoordinatesBaseType</superClass>
        </class>

        <!--
    <xs:complexType name="CoordinatesBaseType">
        <xs:attribute name="groupId" type="xs:string"/>
        <xs:attribute name="artifactId" type="xs:string" use="required"/>
    </xs:complexType>
    -->

        <class>
            <name>CoordinatesBaseType</name>
            <fields>
                <field xml.attribute="true">
                    <name>groupId</name>
                    <type>String</type>
                </field>
                <field xml.attribute="true">
                    <name>artifactId</name>
                    <type>String</type>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="TagNameType">
        <xs:simpleContent>
            <xs:extension base="c:EmptyString">
                <xs:attribute name="tagName" type="xs:string" use="required"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    -->

        <class>
            <name>TagNameType</name>
            <fields>
                <field xml.attribute="true">
                    <name>tagName</name>
                    <type>String</type>
                    <required>true</required>
                </field>
            </fields>
        </class>

        <!--
    <xs:complexType name="PropertyNameType">
        <xs:simpleContent>
            <xs:extension base="c:EmptyString">
                <xs:attribute name="propertyName" type="xs:string" use="required"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    -->

        <class>
            <name>PropertyNameType</name>
            <fields>
                <field xml.content="true">
                    <name>value</name>
                    <type>String</type>
                </field>
                <field xml.attribute="true">
                    <name>propertyName</name>
                    <type>String</type>
                </field>
            </fields>
        </class>

        <!--
    <xs:simpleType name="EmptyString">
        <xs:restriction base="xs:string">
            <xs:maxLength value="0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="TrackedPropertyType">
        <xs:simpleContent>
            <xs:extension base="c:PropertyNameType">
                <xs:attribute name="skipValue" type="xs:string">
                    <xs:annotation>
                        <xs:documentation>
                            Specify which value denotes skipped execution in plugin config.
                            If active build skips execution (property set to skipValue) cache will allow such
                            discrepancy.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="defaultValue" type="xs:string">
                    <xs:annotation>
                        <xs:documentation>
                            Manual value for reconciliation. Required to reconcile runtime only properties
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
          -->

        <class>
            <name>TrackedPropertyType</name>
            <fields>
                <field xml.content="true">
                    <name>value</name>
                    <type>String</type>
                </field>
                <field xml.attribute="true">
                    <name>propertyName</name>
                    <type>String</type>
                </field>
                <field xml.attribute="true">
                    <name>skipValue</name>
                    <type>String</type>
                </field>
                <field xml.attribute="true">
                    <name>defaultValue</name>
                    <type>String</type>
                </field>
            </fields>
        </class>
    </classes>

    <!--
    <xs:attributeGroup name="pathScanAttrGroup">
        <xs:annotation>
            <xs:documentation>
                Common attributes for scanning paths
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="recursive" type="xs:boolean" default="true">
            <xs:annotation>
                <xs:documentation>
                    Should walk directory specified in property recursively or not
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="glob" type="xs:string" default="*">
            <xs:annotation>
                <xs:documentation>
                    Glob to apply when scanning dir denoted by this property
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>



    -->

</model>
